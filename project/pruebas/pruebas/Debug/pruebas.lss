
pruebas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080013a  0080013a  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ee  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8e  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000627  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dbc  00000000  00000000  0000450b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_18>
  4c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
 290:	0e 94 ab 02 	call	0x556	; 0x556 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 294:	87 e6       	ldi	r24, 0x67	; 103
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 51 03 	call	0x6a2	; 0x6a2 <uart_init>
	uart_puts("\r\nScan I2C-bus for devices:\r\n");
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 2a4:	e1 e8       	ldi	r30, 0x81	; 129
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8b 7f       	andi	r24, 0xFB	; 251
 2ac:	80 83       	st	Z, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	83 60       	ori	r24, 0x03	; 3
 2b2:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2b4:	ef e6       	ldi	r30, 0x6F	; 111
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
	
    lcd_init(LCD_DISP_ON);		    // LCD is ON (without cursor)
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_gotoxy(0,0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("Hum:");
 2cc:	8f e1       	ldi	r24, 0x1F	; 31
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(0,1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("Tem:");
 2dc:	84 e2       	ldi	r24, 0x24	; 36
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>

    // Enables interrupts by setting the global interrupt mask
    sei();
 2e4:	78 94       	sei

    
//-------------------------------------------
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |=(1<<REFS0);
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 2f0:	80 81       	ld	r24, Z
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 2f6:	ea e7       	ldi	r30, 0x7A	; 122
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);    
 300:	80 81       	ld	r24, Z
 302:	88 60       	ori	r24, 0x08	; 8
 304:	80 83       	st	Z, r24
    // Set clock prescaler to 128    
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 306:	80 81       	ld	r24, Z
 308:	87 60       	ori	r24, 0x07	; 7
 30a:	80 83       	st	Z, r24
 30c:	ff cf       	rjmp	.-2      	; 0x30c <main+0x7c>

0000030e <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           to read sensors values.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	28 97       	sbiw	r28, 0x08	; 8
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	cd bf       	out	0x3d, r28	; 61
    static state_t state = STATE_IDLE;     // Current state of the FSM
    static uint8_t addr = 0x5c;            // I2C slave address
    uint8_t result = 1;                    // ACK result from the bus
    char lcd_string[8] = "  ";     
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	90 e2       	ldi	r25, 0x20	; 32
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	1c 82       	std	Y+4, r1	; 0x04
 348:	1b 82       	std	Y+3, r1	; 0x03
 34a:	fe 01       	movw	r30, r28
 34c:	35 96       	adiw	r30, 0x05	; 5
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	df 01       	movw	r26, r30
 352:	1d 92       	st	X+, r1
 354:	8a 95       	dec	r24
 356:	e9 f7       	brne	.-6      	; 0x352 <__vector_13+0x44>
	static uint8_t counter = 0x00;
    	
	switch(state){
 358:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	49 f0       	breq	.+18     	; 0x372 <__vector_13+0x64>
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	e9 f0       	breq	.+58     	; 0x39e <__vector_13+0x90>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	09 f0       	breq	.+2      	; 0x36a <__vector_13+0x5c>
 368:	94 c0       	rjmp	.+296    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		case(STATE_IDLE):
		state=STATE_SEND;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 370:	93 c0       	rjmp	.+294    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		
		case(STATE_SEND):
		uart_puts("\n\n");
 372:	86 e3       	ldi	r24, 0x36	; 54
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
    
		//Read temperature and humidity     
		result = twi_start((addr<<1) + TWI_WRITE);
 37a:	88 eb       	ldi	r24, 0xB8	; 184
 37c:	0e 94 ba 02 	call	0x574	; 0x574 <twi_start>
		twi_write(counter);  
 380:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 384:	0e 94 d7 02 	call	0x5ae	; 0x5ae <twi_write>
		counter= counter + (uint8_t)4;
 388:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 38c:	8c 5f       	subi	r24, 0xFC	; 252
 38e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
		twi_stop(); 
 392:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twi_stop>
		state=STATE_RECI;
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 39c:	7d c0       	rjmp	.+250    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		
		case(STATE_RECI):
		result = twi_start((addr<<1) + TWI_READ);
 39e:	89 eb       	ldi	r24, 0xB9	; 185
 3a0:	0e 94 ba 02 	call	0x574	; 0x574 <twi_start>
		
		result=twi_read_ack();
 3a4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 8e 03 	call	0x71c	; 0x71c <__itoa_ncheck>
		itoa(result,lcd_string,10);   // temperature integer part
		lcd_gotoxy(6,0);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
		lcd_puts(lcd_string);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(lcd_string);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		lcd_puts(".")	;
 3ce:	89 e2       	ldi	r24, 0x29	; 41
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(".");	
 3d6:	89 e2       	ldi	r24, 0x29	; 41
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		result=twi_read_ack();
 3de:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <twi_read_ack>
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 8e 03 	call	0x71c	; 0x71c <__itoa_ncheck>
		itoa(result,lcd_string,10);  // temperature fractional part
		lcd_puts(lcd_string);
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(lcd_string);
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		lcd_puts("%");
 400:	8b e2       	ldi	r24, 0x2B	; 43
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts("%\n"),
 408:	8d e2       	ldi	r24, 0x2D	; 45
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		
		result=twi_read_ack();
 410:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <twi_read_ack>
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	be 01       	movw	r22, r28
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 8e 03 	call	0x71c	; 0x71c <__itoa_ncheck>
		itoa(result,lcd_string,10);   // humidity integer part
		lcd_gotoxy(6,1);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
		lcd_puts(lcd_string);
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(lcd_string);
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		lcd_puts(".");	
 43a:	89 e2       	ldi	r24, 0x29	; 41
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(".");	
 442:	89 e2       	ldi	r24, 0x29	; 41
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		result=twi_read_nack();
 44a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <twi_read_nack>
 44e:	4a e0       	ldi	r20, 0x0A	; 10
 450:	be 01       	movw	r22, r28
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 8e 03 	call	0x71c	; 0x71c <__itoa_ncheck>
		itoa(result,lcd_string,10);  // humidity fractional part
		lcd_puts(lcd_string);
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts(lcd_string);
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		lcd_puts("C");
 46c:	80 e3       	ldi	r24, 0x30	; 48
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
		uart_puts("C\n"),
 474:	82 e3       	ldi	r24, 0x32	; 50
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
		
		twi_stop();
 47c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twi_stop>
		
		// Start ADC conversion
		ADCSRA |= (1<<ADSC);
 480:	ea e7       	ldi	r30, 0x7A	; 122
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	80 64       	ori	r24, 0x40	; 64
 488:	80 83       	st	Z, r24
			
		state = STATE_IDLE;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 490:	03 c0       	rjmp	.+6      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		
		default:
		state=STATE_IDLE;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	}
	
}
 498:	28 96       	adiw	r28, 0x08	; 8
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_21>:
 * Function: ADC complete interrupt
 * Purpose:  Read voltage value (light intensity value) from the 
 * photoresistor and move servo motors according to this value.
 **********************************************************************/
ISR(ADC_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <__vector_21+0x28>
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <__vector_21+0x2a>
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 4f8:	80 e3       	ldi	r24, 0x30	; 48
 4fa:	90 e3       	ldi	r25, 0x30	; 48
 4fc:	9a 83       	std	Y+2, r25	; 0x02
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	9c 83       	std	Y+4, r25	; 0x04
 502:	8b 83       	std	Y+3, r24	; 0x03
    value=ADC;
 504:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 508:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 50c:	4a e0       	ldi	r20, 0x0A	; 10
 50e:	be 01       	movw	r22, r28
 510:	6f 5f       	subi	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	0e 94 8e 03 	call	0x71c	; 0x71c <__itoa_ncheck>
    
    //Put light intensity value TO LCD
    itoa(value, lcd_string, 10);  // Convert decimal value (light intensity) to string
	
    // send the same value to UART
	uart_puts(lcd_string);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
	uart_puts("\n\n\n");
 520:	85 e3       	ldi	r24, 0x35	; 53
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 81 03 	call	0x702	; 0x702 <uart_puts>
}   
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	ff 91       	pop	r31
 536:	ef 91       	pop	r30
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 556:	87 b1       	in	r24, 0x07	; 7
 558:	8f 7c       	andi	r24, 0xCF	; 207
 55a:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 55c:	88 b1       	in	r24, 0x08	; 8
 55e:	80 63       	ori	r24, 0x30	; 48
 560:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 562:	e9 eb       	ldi	r30, 0xB9	; 185
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	8c 7f       	andi	r24, 0xFC	; 252
 56a:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 56c:	88 e9       	ldi	r24, 0x98	; 152
 56e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 572:	08 95       	ret

00000574 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 574:	94 ea       	ldi	r25, 0xA4	; 164
 576:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 57a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 57e:	99 23       	and	r25, r25
 580:	e4 f7       	brge	.-8      	; 0x57a <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 582:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 586:	84 e8       	ldi	r24, 0x84	; 132
 588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 58c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 590:	88 23       	and	r24, r24
 592:	e4 f7       	brge	.-8      	; 0x58c <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 594:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 598:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 59a:	88 31       	cpi	r24, 0x18	; 24
 59c:	21 f0       	breq	.+8      	; 0x5a6 <twi_start+0x32>
 59e:	80 34       	cpi	r24, 0x40	; 64
 5a0:	21 f4       	brne	.+8      	; 0x5aa <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 5aa:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 5ac:	08 95       	ret

000005ae <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 5ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 5b2:	84 e8       	ldi	r24, 0x84	; 132
 5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 5b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5bc:	88 23       	and	r24, r24
 5be:	e4 f7       	brge	.-8      	; 0x5b8 <twi_write+0xa>
}
 5c0:	08 95       	ret

000005c2 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 5c2:	84 ec       	ldi	r24, 0xC4	; 196
 5c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 5c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5cc:	88 23       	and	r24, r24
 5ce:	e4 f7       	brge	.-8      	; 0x5c8 <twi_read_ack+0x6>
    return (TWDR);
 5d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 5d4:	08 95       	ret

000005d6 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 5d6:	84 e8       	ldi	r24, 0x84	; 132
 5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 5dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5e0:	88 23       	and	r24, r24
 5e2:	e4 f7       	brge	.-8      	; 0x5dc <twi_read_nack+0x6>
    return (TWDR);
 5e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 5e8:	08 95       	ret

000005ea <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 5ea:	84 e9       	ldi	r24, 0x94	; 148
 5ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5f0:	08 95       	ret

000005f2 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	2f 93       	push	r18
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
 606:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 60a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 60e:	8c 71       	andi	r24, 0x1C	; 28
 610:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <UART_RxHead>
 614:	ef 5f       	subi	r30, 0xFF	; 255
 616:	ef 71       	andi	r30, 0x1F	; 31
 618:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <UART_RxTail>
 61c:	e9 17       	cp	r30, r25
 61e:	39 f0       	breq	.+14     	; 0x62e <__vector_18+0x3c>
 620:	e0 93 3d 01 	sts	0x013D, r30	; 0x80013d <UART_RxHead>
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	e0 5c       	subi	r30, 0xC0	; 192
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	20 83       	st	Z, r18
 62c:	01 c0       	rjmp	.+2      	; 0x630 <__vector_18+0x3e>
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_LastRxError>
 634:	89 2b       	or	r24, r25
 636:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <UART_LastRxError>
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_19>:
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
 660:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <UART_TxHead>
 664:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <UART_TxTail>
 668:	98 17       	cp	r25, r24
 66a:	69 f0       	breq	.+26     	; 0x686 <__vector_19+0x38>
 66c:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <UART_TxTail>
 670:	ef 5f       	subi	r30, 0xFF	; 255
 672:	ef 71       	andi	r30, 0x1F	; 31
 674:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <UART_TxTail>
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	e0 5a       	subi	r30, 0xA0	; 160
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	80 81       	ld	r24, Z
 680:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 684:	05 c0       	rjmp	.+10     	; 0x690 <__vector_19+0x42>
 686:	e1 ec       	ldi	r30, 0xC1	; 193
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	8f 7d       	andi	r24, 0xDF	; 223
 68e:	80 83       	st	Z, r24
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <uart_init>:
 6a2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <UART_TxHead>
 6a6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <UART_TxTail>
 6aa:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <UART_RxHead>
 6ae:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <UART_RxTail>
 6b2:	28 2f       	mov	r18, r24
 6b4:	39 2f       	mov	r19, r25
 6b6:	33 23       	and	r19, r19
 6b8:	1c f4       	brge	.+6      	; 0x6c0 <uart_init+0x1e>
 6ba:	22 e0       	ldi	r18, 0x02	; 2
 6bc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6c0:	90 78       	andi	r25, 0x80	; 128
 6c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 6ca:	88 e9       	ldi	r24, 0x98	; 152
 6cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 6d0:	86 e0       	ldi	r24, 0x06	; 6
 6d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6d6:	08 95       	ret

000006d8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 6d8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <UART_TxHead>
 6dc:	2f 5f       	subi	r18, 0xFF	; 255
 6de:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 6e0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <UART_TxTail>
 6e4:	29 17       	cp	r18, r25
 6e6:	e1 f3       	breq	.-8      	; 0x6e0 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 6e8:	e2 2f       	mov	r30, r18
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	e0 5a       	subi	r30, 0xA0	; 160
 6ee:	fe 4f       	sbci	r31, 0xFE	; 254
 6f0:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 6f2:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 6f6:	e1 ec       	ldi	r30, 0xC1	; 193
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	80 62       	ori	r24, 0x20	; 32
 6fe:	80 83       	st	Z, r24
 700:	08 95       	ret

00000702 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ec 01       	movw	r28, r24
    while (*s)
 708:	03 c0       	rjmp	.+6      	; 0x710 <uart_puts+0xe>
        uart_putc(*s++);
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 710:	88 81       	ld	r24, Y
 712:	81 11       	cpse	r24, r1
 714:	fa cf       	rjmp	.-12     	; 0x70a <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <__itoa_ncheck>:
 71c:	bb 27       	eor	r27, r27
 71e:	4a 30       	cpi	r20, 0x0A	; 10
 720:	31 f4       	brne	.+12     	; 0x72e <__itoa_ncheck+0x12>
 722:	99 23       	and	r25, r25
 724:	22 f4       	brpl	.+8      	; 0x72e <__itoa_ncheck+0x12>
 726:	bd e2       	ldi	r27, 0x2D	; 45
 728:	90 95       	com	r25
 72a:	81 95       	neg	r24
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	0c 94 9a 03 	jmp	0x734	; 0x734 <__utoa_common>

00000732 <__utoa_ncheck>:
 732:	bb 27       	eor	r27, r27

00000734 <__utoa_common>:
 734:	fb 01       	movw	r30, r22
 736:	55 27       	eor	r21, r21
 738:	aa 27       	eor	r26, r26
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	aa 1f       	adc	r26, r26
 740:	a4 17       	cp	r26, r20
 742:	10 f0       	brcs	.+4      	; 0x748 <__utoa_common+0x14>
 744:	a4 1b       	sub	r26, r20
 746:	83 95       	inc	r24
 748:	50 51       	subi	r21, 0x10	; 16
 74a:	b9 f7       	brne	.-18     	; 0x73a <__utoa_common+0x6>
 74c:	a0 5d       	subi	r26, 0xD0	; 208
 74e:	aa 33       	cpi	r26, 0x3A	; 58
 750:	08 f0       	brcs	.+2      	; 0x754 <__utoa_common+0x20>
 752:	a9 5d       	subi	r26, 0xD9	; 217
 754:	a1 93       	st	Z+, r26
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	79 f7       	brne	.-34     	; 0x738 <__utoa_common+0x4>
 75a:	b1 11       	cpse	r27, r1
 75c:	b1 93       	st	Z+, r27
 75e:	11 92       	st	Z+, r1
 760:	cb 01       	movw	r24, r22
 762:	0c 94 b3 03 	jmp	0x766	; 0x766 <strrev>

00000766 <strrev>:
 766:	dc 01       	movw	r26, r24
 768:	fc 01       	movw	r30, r24
 76a:	67 2f       	mov	r22, r23
 76c:	71 91       	ld	r23, Z+
 76e:	77 23       	and	r23, r23
 770:	e1 f7       	brne	.-8      	; 0x76a <strrev+0x4>
 772:	32 97       	sbiw	r30, 0x02	; 2
 774:	04 c0       	rjmp	.+8      	; 0x77e <strrev+0x18>
 776:	7c 91       	ld	r23, X
 778:	6d 93       	st	X+, r22
 77a:	70 83       	st	Z, r23
 77c:	62 91       	ld	r22, -Z
 77e:	ae 17       	cp	r26, r30
 780:	bf 07       	cpc	r27, r31
 782:	c8 f3       	brcs	.-14     	; 0x776 <strrev+0x10>
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
