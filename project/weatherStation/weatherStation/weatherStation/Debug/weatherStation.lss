
weatherStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800140  00800140  00000814  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c27  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb9  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6f  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8e  00000000  00000000  00004c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_18>
  4c:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  9e:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);// set output to high
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);// set output to high
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_toggle+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_toggle+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <toggle_e+0x4>
  f8:	00 00       	nop
  fa:	29 98       	cbi	0x05, 1	; 5
  fc:	08 95       	ret

000000fe <lcd_write>:
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
 102:	66 23       	and	r22, r22
 104:	11 f0       	breq	.+4      	; 0x10a <lcd_write+0xc>
 106:	28 9a       	sbi	0x05, 0	; 5
 108:	01 c0       	rjmp	.+2      	; 0x10c <lcd_write+0xe>
 10a:	28 98       	cbi	0x05, 0	; 5
 10c:	54 9a       	sbi	0x0a, 4	; 10
 10e:	55 9a       	sbi	0x0a, 5	; 10
 110:	56 9a       	sbi	0x0a, 6	; 10
 112:	57 9a       	sbi	0x0a, 7	; 10
 114:	5f 98       	cbi	0x0b, 7	; 11
 116:	5e 98       	cbi	0x0b, 6	; 11
 118:	5d 98       	cbi	0x0b, 5	; 11
 11a:	5c 98       	cbi	0x0b, 4	; 11
 11c:	cc 23       	and	r28, r28
 11e:	0c f4       	brge	.+2      	; 0x122 <lcd_write+0x24>
 120:	5f 9a       	sbi	0x0b, 7	; 11
 122:	c6 fd       	sbrc	r28, 6
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	c5 fd       	sbrc	r28, 5
 128:	5d 9a       	sbi	0x0b, 5	; 11
 12a:	c4 fd       	sbrc	r28, 4
 12c:	5c 9a       	sbi	0x0b, 4	; 11
 12e:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 132:	5f 98       	cbi	0x0b, 7	; 11
 134:	5e 98       	cbi	0x0b, 6	; 11
 136:	5d 98       	cbi	0x0b, 5	; 11
 138:	5c 98       	cbi	0x0b, 4	; 11
 13a:	c3 fd       	sbrc	r28, 3
 13c:	5f 9a       	sbi	0x0b, 7	; 11
 13e:	c2 fd       	sbrc	r28, 2
 140:	5e 9a       	sbi	0x0b, 6	; 11
 142:	c1 fd       	sbrc	r28, 1
 144:	5d 9a       	sbi	0x0b, 5	; 11
 146:	c0 fd       	sbrc	r28, 0
 148:	5c 9a       	sbi	0x0b, 4	; 11
 14a:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 14e:	5c 9a       	sbi	0x0b, 4	; 11
 150:	5d 9a       	sbi	0x0b, 5	; 11
 152:	5e 9a       	sbi	0x0b, 6	; 11
 154:	5f 9a       	sbi	0x0b, 7	; 11
 156:	87 eb       	ldi	r24, 0xB7	; 183
 158:	9b e0       	ldi	r25, 0x0B	; 11
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_write+0x5c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_write+0x62>
 160:	00 00       	nop
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_command>:
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
 16c:	08 95       	ret

0000016e <lcd_gotoxy>:
 16e:	61 11       	cpse	r22, r1
 170:	04 c0       	rjmp	.+8      	; 0x17a <lcd_gotoxy+0xc>
 172:	80 58       	subi	r24, 0x80	; 128
 174:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 178:	08 95       	ret
 17a:	80 54       	subi	r24, 0x40	; 64
 17c:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 180:	08 95       	ret

00000182 <lcd_clrscr>:
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 188:	08 95       	ret

0000018a <lcd_putc>:
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
 190:	08 95       	ret

00000192 <lcd_puts>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	29 f0       	breq	.+10     	; 0x1ac <lcd_puts+0x1a>
 1a2:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <lcd_puts+0x10>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1b6:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1b8:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ba:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1bc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1be:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1c0:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1c2:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	99 ef       	ldi	r25, 0xF9	; 249
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x16>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init+0x1c>
 1ce:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1d0:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1d2:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1d4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0x30>
 1e2:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1e4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x3a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x40>
 1f2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1f4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x4a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x50>
 202:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 204:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 206:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x5c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x62>
 214:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 222:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
}/* lcd_init */
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_init>
    lcd_gotoxy(0,0);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts("Temp: ");
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    lcd_gotoxy(0,1);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts("Hum:  ");
 254:	87 e0       	ldi	r24, 0x07	; 7
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
	
    // Initialize I2C (TWI)
    twi_init();
 25c:	0e 94 82 02 	call	0x504	; 0x504 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 260:	87 e6       	ldi	r24, 0x67	; 103
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 2c 03 	call	0x658	; 0x658 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_262ms();
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	80 83       	st	Z, r24
 272:	80 81       	ld	r24, Z
 274:	83 60       	ori	r24, 0x03	; 3
 276:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 278:	ef e6       	ldi	r30, 0x6F	; 111
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 282:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 284:	8e e0       	ldi	r24, 0x0E	; 14
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_puts>

//-------------------------------------------

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |=(1<<REFS0);  
 28c:	ec e7       	ldi	r30, 0x7C	; 124
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 296:	80 81       	ld	r24, Z
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);
 2a6:	80 81       	ld	r24, Z
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	80 83       	st	Z, r24
    // Set clock prescaler to 128
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 2ac:	80 81       	ld	r24, Z
 2ae:	87 60       	ori	r24, 0x07	; 7
 2b0:	80 83       	st	Z, r24
    
    //----------------------MOTOR
    // MOTOR at port B
    GPIO_config_output(&DDRB, MOTOR);
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	84 e2       	ldi	r24, 0x24	; 36
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, MOTOR);
 2bc:	65 e0       	ldi	r22, 0x05	; 5
 2be:	85 e2       	ldi	r24, 0x25	; 37
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

    // Enables interrupts by setting the global interrupt mask
    sei();
 2c6:	78 94       	sei
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x92>

000002ca <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	28 97       	sbiw	r28, 0x08	; 8
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_devices=0;
    uint8_t temp_int;
    uint8_t temp_frac;
    uint8_t hum_int;
    uint8_t hum_frac;
    char lcd_string[8] = "00";     
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	90 e3       	ldi	r25, 0x30	; 48
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	1c 82       	std	Y+4, r1	; 0x04
 308:	1b 82       	std	Y+3, r1	; 0x03
 30a:	fe 01       	movw	r30, r28
 30c:	35 96       	adiw	r30, 0x05	; 5
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	df 01       	movw	r26, r30
 312:	1d 92       	st	X+, r1
 314:	8a 95       	dec	r24
 316:	e9 f7       	brne	.-6      	; 0x312 <__vector_13+0x48>
    
    // Start ADC conversion
    ADCSRA |= (1<<ADSC);
 318:	ea e7       	ldi	r30, 0x7A	; 122
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 83       	st	Z, r24

    
    uart_puts("Reading \r\n");
 322:	8c e2       	ldi	r24, 0x2C	; 44
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_puts>
    
    //Read temperature     
    result = twi_start((addr<<1) + TWI_WRITE);
 32a:	88 eb       	ldi	r24, 0xB8	; 184
 32c:	0e 94 91 02 	call	0x522	; 0x522 <twi_start>
    twi_write(0x02);
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	0e 94 af 02 	call	0x55e	; 0x55e <twi_write>
	twi_stop();  //lo podemos quitra alomejor
 336:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_stop>
	
    result = twi_start((addr<<1) + TWI_READ);
 33a:	89 eb       	ldi	r24, 0xB9	; 185
 33c:	0e 94 91 02 	call	0x522	; 0x522 <twi_start>

    temp_int=twi_read_ack();
 340:	0e 94 ba 02 	call	0x574	; 0x574 <twi_read_ack>
 344:	08 2f       	mov	r16, r24
    temp_frac=twi_read_nack();
 346:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_read_nack>
 34a:	18 2f       	mov	r17, r24
    twi_stop();
 34c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 350:	4a e0       	ldi	r20, 0x0A	; 10
 352:	be 01       	movw	r22, r28
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	80 2f       	mov	r24, r16
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>

    itoa(temp_int,lcd_string,10); // temp integer part
	lcd_gotoxy(6,0);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts(lcd_string);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    lcd_puts(".");
 370:	87 e3       	ldi	r24, 0x37	; 55
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	81 2f       	mov	r24, r17
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>
    itoa(temp_frac,lcd_string,10); // temp fractional part
    lcd_puts(lcd_string);
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    lcd_puts(" C");
 390:	89 e3       	ldi	r24, 0x39	; 57
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>

     //Read hum
     result = twi_start((addr<<1) + TWI_WRITE);
 398:	88 eb       	ldi	r24, 0xB8	; 184
 39a:	0e 94 91 02 	call	0x522	; 0x522 <twi_start>
     twi_write(0x00);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 af 02 	call	0x55e	; 0x55e <twi_write>
	 twi_stop();
 3a4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_stop>
     result = twi_start((addr<<1) + TWI_READ);
 3a8:	89 eb       	ldi	r24, 0xB9	; 185
 3aa:	0e 94 91 02 	call	0x522	; 0x522 <twi_start>

      hum_int=twi_read_ack();
 3ae:	0e 94 ba 02 	call	0x574	; 0x574 <twi_read_ack>
 3b2:	08 2f       	mov	r16, r24
      hum_frac=twi_read_nack();
 3b4:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_read_nack>
 3b8:	18 2f       	mov	r17, r24
      twi_stop();
 3ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_stop>
 3be:	4a e0       	ldi	r20, 0x0A	; 10
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	80 2f       	mov	r24, r16
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>
	  
     itoa(hum_int,lcd_string,10); // hum integer part
	 lcd_gotoxy(6,1);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
     lcd_puts(lcd_string);
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
     lcd_puts(".");
 3de:	87 e3       	ldi	r24, 0x37	; 55
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
 3e6:	4a e0       	ldi	r20, 0x0A	; 10
 3e8:	be 01       	movw	r22, r28
 3ea:	6f 5f       	subi	r22, 0xFF	; 255
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	81 2f       	mov	r24, r17
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>
     itoa(hum_frac,lcd_string,10); // hum fractional part
     lcd_puts(lcd_string);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
     lcd_puts(" %");
 3fe:	8c e3       	ldi	r24, 0x3C	; 60
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
        break;
    }*/
}
 406:	28 96       	adiw	r28, 0x08	; 8
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <__vector_21+0x28>
 464:	00 d0       	rcall	.+0      	; 0x466 <__vector_21+0x2a>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 46a:	80 e3       	ldi	r24, 0x30	; 48
 46c:	90 e3       	ldi	r25, 0x30	; 48
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	9c 83       	std	Y+4, r25	; 0x04
 474:	8b 83       	std	Y+3, r24	; 0x03
    value=ADC;
 476:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 47a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 47e:	4a e0       	ldi	r20, 0x0A	; 10
 480:	be 01       	movw	r22, r28
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>
    
    //Put new value TO LCD
    itoa(value, lcd_string, 10);  // Convert decimal value to string
    lcd_gotoxy(12,0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	8c e0       	ldi	r24, 0x0C	; 12
 48e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts(lcd_string);
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    // send the same value to UART
     uart_puts(lcd_string);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_puts>
     uart_puts(" ");
 4a2:	8c e0       	ldi	r24, 0x0C	; 12
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	9f e0       	ldi	r25, 0x0F	; 15
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__vector_21+0x72>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__vector_21+0x78>
 4b4:	00 00       	nop
     
     _delay_ms(DELAY_1);
     GPIO_toggle(&DDRB, MOTOR);
 4b6:	65 e0       	ldi	r22, 0x05	; 5
 4b8:	84 e2       	ldi	r24, 0x24	; 36
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 4c0:	8f e9       	ldi	r24, 0x9F	; 159
 4c2:	9f e0       	ldi	r25, 0x0F	; 15
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__vector_21+0x88>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__vector_21+0x8e>
 4ca:	00 00       	nop
     _delay_ms(DELAY_1);
     GPIO_toggle(&DDRB, MOTOR);
 4cc:	65 e0       	ldi	r22, 0x05	; 5
 4ce:	84 e2       	ldi	r24, 0x24	; 36
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
     
     
}   
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 504:	87 b1       	in	r24, 0x07	; 7
 506:	8f 7c       	andi	r24, 0xCF	; 207
 508:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 50a:	88 b1       	in	r24, 0x08	; 8
 50c:	80 63       	ori	r24, 0x30	; 48
 50e:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 510:	e9 eb       	ldi	r30, 0xB9	; 185
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	8c 7f       	andi	r24, 0xFC	; 252
 518:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 51a:	88 e9       	ldi	r24, 0x98	; 152
 51c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 520:	08 95       	ret

00000522 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 522:	94 ea       	ldi	r25, 0xA4	; 164
 524:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 528:	ec eb       	ldi	r30, 0xBC	; 188
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	90 81       	ld	r25, Z
 52e:	99 23       	and	r25, r25
 530:	ec f7       	brge	.-6      	; 0x52c <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 532:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 536:	84 e8       	ldi	r24, 0x84	; 132
 538:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 53c:	ec eb       	ldi	r30, 0xBC	; 188
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	88 23       	and	r24, r24
 544:	ec f7       	brge	.-6      	; 0x540 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 546:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 54a:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 54c:	98 31       	cpi	r25, 0x18	; 24
 54e:	29 f0       	breq	.+10     	; 0x55a <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 34       	cpi	r25, 0x40	; 64
 554:	19 f4       	brne	.+6      	; 0x55c <twi_start+0x3a>
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
 55a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 55c:	08 95       	ret

0000055e <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 55e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 562:	84 e8       	ldi	r24, 0x84	; 132
 564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 568:	ec eb       	ldi	r30, 0xBC	; 188
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	88 23       	and	r24, r24
 570:	ec f7       	brge	.-6      	; 0x56c <twi_write+0xe>
}
 572:	08 95       	ret

00000574 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 574:	84 ec       	ldi	r24, 0xC4	; 196
 576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 57a:	ec eb       	ldi	r30, 0xBC	; 188
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	88 23       	and	r24, r24
 582:	ec f7       	brge	.-6      	; 0x57e <twi_read_ack+0xa>
    return (TWDR);
 584:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 588:	08 95       	ret

0000058a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 58a:	84 e8       	ldi	r24, 0x84	; 132
 58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 590:	ec eb       	ldi	r30, 0xBC	; 188
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	88 23       	and	r24, r24
 598:	ec f7       	brge	.-6      	; 0x594 <twi_read_nack+0xa>
    return (TWDR);
 59a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 59e:	08 95       	ret

000005a0 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 5a0:	84 e9       	ldi	r24, 0x94	; 148
 5a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 5a6:	08 95       	ret

000005a8 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	2f 93       	push	r18
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
 5bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 5c0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5c4:	8c 71       	andi	r24, 0x1C	; 28
 5c6:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <UART_RxHead>
 5ca:	ef 5f       	subi	r30, 0xFF	; 255
 5cc:	ef 71       	andi	r30, 0x1F	; 31
 5ce:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <UART_RxTail>
 5d2:	e9 17       	cp	r30, r25
 5d4:	39 f0       	breq	.+14     	; 0x5e4 <__vector_18+0x3c>
 5d6:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <UART_RxHead>
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	eb 5b       	subi	r30, 0xBB	; 187
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	20 83       	st	Z, r18
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__vector_18+0x3e>
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
 5ea:	89 2b       	or	r24, r25
 5ec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	0f 90       	pop	r0
 600:	1f 90       	pop	r1
 602:	18 95       	reti

00000604 <__vector_19>:
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
 616:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_TxHead>
 61a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <UART_TxTail>
 61e:	98 17       	cp	r25, r24
 620:	69 f0       	breq	.+26     	; 0x63c <__vector_19+0x38>
 622:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <UART_TxTail>
 626:	ef 5f       	subi	r30, 0xFF	; 255
 628:	ef 71       	andi	r30, 0x1F	; 31
 62a:	e0 93 43 01 	sts	0x0143, r30	; 0x800143 <UART_TxTail>
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	eb 59       	subi	r30, 0x9B	; 155
 632:	fe 4f       	sbci	r31, 0xFE	; 254
 634:	80 81       	ld	r24, Z
 636:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 63a:	05 c0       	rjmp	.+10     	; 0x646 <__vector_19+0x42>
 63c:	e1 ec       	ldi	r30, 0xC1	; 193
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	8f 7d       	andi	r24, 0xDF	; 223
 644:	80 83       	st	Z, r24
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <uart_init>:
 658:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_TxHead>
 65c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_TxTail>
 660:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART_RxHead>
 664:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <UART_RxTail>
 668:	99 23       	and	r25, r25
 66a:	1c f4       	brge	.+6      	; 0x672 <uart_init+0x1a>
 66c:	22 e0       	ldi	r18, 0x02	; 2
 66e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 672:	90 78       	andi	r25, 0x80	; 128
 674:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 678:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 67c:	88 e9       	ldi	r24, 0x98	; 152
 67e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 682:	86 e0       	ldi	r24, 0x06	; 6
 684:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 688:	08 95       	ret

0000068a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 68a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <UART_TxHead>
 68e:	2f 5f       	subi	r18, 0xFF	; 255
 690:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 692:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_TxTail>
 696:	29 17       	cp	r18, r25
 698:	e1 f3       	breq	.-8      	; 0x692 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 69a:	e2 2f       	mov	r30, r18
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	eb 59       	subi	r30, 0x9B	; 155
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 6a4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 6a8:	e1 ec       	ldi	r30, 0xC1	; 193
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	80 62       	ori	r24, 0x20	; 32
 6b0:	80 83       	st	Z, r24
 6b2:	08 95       	ret

000006b4 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	ec 01       	movw	r28, r24
    while (*s)
 6ba:	88 81       	ld	r24, Y
 6bc:	88 23       	and	r24, r24
 6be:	31 f0       	breq	.+12     	; 0x6cc <uart_puts+0x18>
 6c0:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 6c2:	0e 94 45 03 	call	0x68a	; 0x68a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 6c6:	89 91       	ld	r24, Y+
 6c8:	81 11       	cpse	r24, r1
 6ca:	fb cf       	rjmp	.-10     	; 0x6c2 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <__itoa_ncheck>:
 6d2:	bb 27       	eor	r27, r27
 6d4:	4a 30       	cpi	r20, 0x0A	; 10
 6d6:	31 f4       	brne	.+12     	; 0x6e4 <__itoa_ncheck+0x12>
 6d8:	99 23       	and	r25, r25
 6da:	22 f4       	brpl	.+8      	; 0x6e4 <__itoa_ncheck+0x12>
 6dc:	bd e2       	ldi	r27, 0x2D	; 45
 6de:	90 95       	com	r25
 6e0:	81 95       	neg	r24
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__utoa_common>

000006e8 <__utoa_ncheck>:
 6e8:	bb 27       	eor	r27, r27

000006ea <__utoa_common>:
 6ea:	fb 01       	movw	r30, r22
 6ec:	55 27       	eor	r21, r21
 6ee:	aa 27       	eor	r26, r26
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	aa 1f       	adc	r26, r26
 6f6:	a4 17       	cp	r26, r20
 6f8:	10 f0       	brcs	.+4      	; 0x6fe <__utoa_common+0x14>
 6fa:	a4 1b       	sub	r26, r20
 6fc:	83 95       	inc	r24
 6fe:	50 51       	subi	r21, 0x10	; 16
 700:	b9 f7       	brne	.-18     	; 0x6f0 <__utoa_common+0x6>
 702:	a0 5d       	subi	r26, 0xD0	; 208
 704:	aa 33       	cpi	r26, 0x3A	; 58
 706:	08 f0       	brcs	.+2      	; 0x70a <__utoa_common+0x20>
 708:	a9 5d       	subi	r26, 0xD9	; 217
 70a:	a1 93       	st	Z+, r26
 70c:	00 97       	sbiw	r24, 0x00	; 0
 70e:	79 f7       	brne	.-34     	; 0x6ee <__utoa_common+0x4>
 710:	b1 11       	cpse	r27, r1
 712:	b1 93       	st	Z+, r27
 714:	11 92       	st	Z+, r1
 716:	cb 01       	movw	r24, r22
 718:	0c 94 8e 03 	jmp	0x71c	; 0x71c <strrev>

0000071c <strrev>:
 71c:	dc 01       	movw	r26, r24
 71e:	fc 01       	movw	r30, r24
 720:	67 2f       	mov	r22, r23
 722:	71 91       	ld	r23, Z+
 724:	77 23       	and	r23, r23
 726:	e1 f7       	brne	.-8      	; 0x720 <strrev+0x4>
 728:	32 97       	sbiw	r30, 0x02	; 2
 72a:	04 c0       	rjmp	.+8      	; 0x734 <strrev+0x18>
 72c:	7c 91       	ld	r23, X
 72e:	6d 93       	st	X+, r22
 730:	70 83       	st	Z, r23
 732:	62 91       	ld	r22, -Z
 734:	ae 17       	cp	r26, r30
 736:	bf 07       	cpc	r27, r31
 738:	c8 f3       	brcs	.-14     	; 0x72c <strrev+0x10>
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
