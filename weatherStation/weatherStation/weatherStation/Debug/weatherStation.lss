
weatherStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800130  00800130  000008dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e7e  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c58  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e81  00000000  00000000  000035b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00004434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a3  00000000  00000000  0000480c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f0  00000000  00000000  00004eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_18>
  4c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  9e:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Clear Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Clear Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);// set output to high
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <toggle_e+0x4>
  f8:	00 00       	nop
  fa:	29 98       	cbi	0x05, 1	; 5
  fc:	08 95       	ret

000000fe <lcd_write>:
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
 102:	66 23       	and	r22, r22
 104:	11 f0       	breq	.+4      	; 0x10a <lcd_write+0xc>
 106:	28 9a       	sbi	0x05, 0	; 5
 108:	01 c0       	rjmp	.+2      	; 0x10c <lcd_write+0xe>
 10a:	28 98       	cbi	0x05, 0	; 5
 10c:	54 9a       	sbi	0x0a, 4	; 10
 10e:	55 9a       	sbi	0x0a, 5	; 10
 110:	56 9a       	sbi	0x0a, 6	; 10
 112:	57 9a       	sbi	0x0a, 7	; 10
 114:	5f 98       	cbi	0x0b, 7	; 11
 116:	5e 98       	cbi	0x0b, 6	; 11
 118:	5d 98       	cbi	0x0b, 5	; 11
 11a:	5c 98       	cbi	0x0b, 4	; 11
 11c:	cc 23       	and	r28, r28
 11e:	0c f4       	brge	.+2      	; 0x122 <lcd_write+0x24>
 120:	5f 9a       	sbi	0x0b, 7	; 11
 122:	c6 fd       	sbrc	r28, 6
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	c5 fd       	sbrc	r28, 5
 128:	5d 9a       	sbi	0x0b, 5	; 11
 12a:	c4 fd       	sbrc	r28, 4
 12c:	5c 9a       	sbi	0x0b, 4	; 11
 12e:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 132:	5f 98       	cbi	0x0b, 7	; 11
 134:	5e 98       	cbi	0x0b, 6	; 11
 136:	5d 98       	cbi	0x0b, 5	; 11
 138:	5c 98       	cbi	0x0b, 4	; 11
 13a:	c3 fd       	sbrc	r28, 3
 13c:	5f 9a       	sbi	0x0b, 7	; 11
 13e:	c2 fd       	sbrc	r28, 2
 140:	5e 9a       	sbi	0x0b, 6	; 11
 142:	c1 fd       	sbrc	r28, 1
 144:	5d 9a       	sbi	0x0b, 5	; 11
 146:	c0 fd       	sbrc	r28, 0
 148:	5c 9a       	sbi	0x0b, 4	; 11
 14a:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 14e:	5c 9a       	sbi	0x0b, 4	; 11
 150:	5d 9a       	sbi	0x0b, 5	; 11
 152:	5e 9a       	sbi	0x0b, 6	; 11
 154:	5f 9a       	sbi	0x0b, 7	; 11
 156:	87 eb       	ldi	r24, 0xB7	; 183
 158:	9b e0       	ldi	r25, 0x0B	; 11
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_write+0x5c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_write+0x62>
 160:	00 00       	nop
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_command>:
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
 16c:	08 95       	ret

0000016e <lcd_gotoxy>:
 16e:	61 11       	cpse	r22, r1
 170:	04 c0       	rjmp	.+8      	; 0x17a <lcd_gotoxy+0xc>
 172:	80 58       	subi	r24, 0x80	; 128
 174:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 178:	08 95       	ret
 17a:	80 54       	subi	r24, 0x40	; 64
 17c:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 180:	08 95       	ret

00000182 <lcd_clrscr>:
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 188:	08 95       	ret

0000018a <lcd_putc>:
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
 190:	08 95       	ret

00000192 <lcd_puts>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	29 f0       	breq	.+10     	; 0x1ac <lcd_puts+0x1a>
 1a2:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <lcd_puts+0x10>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1b6:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1b8:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ba:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1bc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1be:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1c0:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1c2:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	99 ef       	ldi	r25, 0xF9	; 249
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x16>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init+0x1c>
 1ce:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1d0:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1d2:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1d4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0x30>
 1e2:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1e4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x3a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x40>
 1f2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1f4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x4a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x50>
 202:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 204:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 206:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x5c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x62>
 214:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 222:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
}/* lcd_init */
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
 236:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 23a:	87 e6       	ldi	r24, 0x67	; 103
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 98 03 	call	0x730	; 0x730 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 242:	e1 e8       	ldi	r30, 0x81	; 129
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	80 83       	st	Z, r24
 24c:	80 81       	ld	r24, Z
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 252:	ef e6       	ldi	r30, 0x6F	; 111
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 25c:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_puts>
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 98 03 	call	0x730	; 0x730 <uart_init>
    
//-------------------------------------------
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |=(1<<REFS0);
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 27e:	ea e7       	ldi	r30, 0x7A	; 122
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 68       	ori	r24, 0x80	; 128
 286:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);    
 288:	80 81       	ld	r24, Z
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	80 83       	st	Z, r24
    // Set clock prescaler to 128    
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 28e:	80 81       	ld	r24, Z
 290:	87 60       	ori	r24, 0x07	; 7
 292:	80 83       	st	Z, r24
    
//----------------------------------------------------
    // Initialize and set to low motors at port B
    GPIO_config_output(&DDRB, MOTOR1);
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	84 e2       	ldi	r24, 0x24	; 36
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, MOTOR1);
 29e:	65 e0       	ldi	r22, 0x05	; 5
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_config_output(&DDRB, MOTOR2);
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	84 e2       	ldi	r24, 0x24	; 36
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, MOTOR2);
 2b2:	64 e0       	ldi	r22, 0x04	; 4
 2b4:	85 e2       	ldi	r24, 0x25	; 37
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x86>

000002be <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119 to read sensors values.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <__vector_13+0x2c>
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t result = 1;                    // ACK result from the bus
    uint8_t temp_int;
    uint8_t temp_frac;
    uint8_t hum_int;
    uint8_t hum_frac;
    char lcd_string[2] = "  ";     
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	90 e2       	ldi	r25, 0x20	; 32
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
    
    // Start ADC conversion
    ADCSRA |= (1<<ADSC);
 2f6:	ea e7       	ldi	r30, 0x7A	; 122
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	80 83       	st	Z, r24
    
    //Read temperature     
    result = twi_start((addr<<1) + TWI_WRITE);
 300:	88 eb       	ldi	r24, 0xB8	; 184
 302:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_start>
    twi_write(0x02);                              //Register 0x02 and 0x03 stores temperature values (integer and fractional part)
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 1b 03 	call	0x636	; 0x636 <twi_write>
    result = twi_start((addr<<1) + TWI_READ);
 30c:	89 eb       	ldi	r24, 0xB9	; 185
 30e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_start>
    
    temp_int=twi_read_ack();
 312:	0e 94 26 03 	call	0x64c	; 0x64c <twi_read_ack>
 316:	08 2f       	mov	r16, r24
    temp_frac=twi_read_nack();
 318:	0e 94 31 03 	call	0x662	; 0x662 <twi_read_nack>
 31c:	18 2f       	mov	r17, r24
    twi_stop();
 31e:	0e 94 3c 03 	call	0x678	; 0x678 <twi_stop>
	
    lcd_init(LCD_DISP_ON);		    // LCD is ON (without cursor)
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_init>
    lcd_gotoxy(0,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts("Tem: ");
 330:	8e e1       	ldi	r24, 0x1E	; 30
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	80 2f       	mov	r24, r16
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    itoa(temp_int,lcd_string,10);   // temperature integer part
    lcd_puts(lcd_string);
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    lcd_puts(".");					// Decimal point
 350:	84 e2       	ldi	r24, 0x24	; 36
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
 358:	4a e0       	ldi	r20, 0x0A	; 10
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	81 2f       	mov	r24, r17
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    itoa(temp_frac,lcd_string,10);  // temperature fractional part
    lcd_puts(lcd_string);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    lcd_puts("C");					// Celsius degrees
 370:	86 e2       	ldi	r24, 0x26	; 38
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
//----------------------------------------------
     //Read humidity
     result = twi_start((addr<<1) + TWI_WRITE);
 378:	88 eb       	ldi	r24, 0xB8	; 184
 37a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_start>
     twi_write(0x00);                              //Register 0x00 and 0x01 stores himidity values (integer and fractional part)
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 1b 03 	call	0x636	; 0x636 <twi_write>
     result = twi_start((addr<<1) + TWI_READ);
 384:	89 eb       	ldi	r24, 0xB9	; 185
 386:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_start>

     hum_int=twi_read_ack();
 38a:	0e 94 26 03 	call	0x64c	; 0x64c <twi_read_ack>
 38e:	08 2f       	mov	r16, r24
     hum_frac=twi_read_nack();
 390:	0e 94 31 03 	call	0x662	; 0x662 <twi_read_nack>
 394:	18 2f       	mov	r17, r24
     twi_stop();
 396:	0e 94 3c 03 	call	0x678	; 0x678 <twi_stop>
	 
     lcd_gotoxy(0,1);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
     lcd_puts("Hum: ");
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
 3aa:	4a e0       	ldi	r20, 0x0A	; 10
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 5f       	subi	r22, 0xFF	; 255
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	80 2f       	mov	r24, r16
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
     itoa(hum_int,lcd_string,10);  // hum integer part
     lcd_puts(lcd_string);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
     lcd_puts(".");
 3c2:	84 e2       	ldi	r24, 0x24	; 36
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
 3ca:	4a e0       	ldi	r20, 0x0A	; 10
 3cc:	be 01       	movw	r22, r28
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	81 2f       	mov	r24, r17
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
     itoa(hum_frac,lcd_string,10); // hum fractional part
     lcd_puts(lcd_string);
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
     lcd_puts("%");                // Percentage of humidiry
 3e2:	8e e2       	ldi	r24, 0x2E	; 46
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
}
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_21>:
 * Function: ADC complete interrupt
 * Purpose:  Read voltage value (light intensity value) from the 
 * photoresistor and move servo motors according to this value.
 **********************************************************************/
ISR(ADC_vect)
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <__vector_21+0x2c>
 444:	00 d0       	rcall	.+0      	; 0x446 <__vector_21+0x2e>
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 44a:	80 e3       	ldi	r24, 0x30	; 48
 44c:	90 e3       	ldi	r25, 0x30	; 48
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	8b 83       	std	Y+3, r24	; 0x03
    value=ADC;
 456:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 45a:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 45e:	4a e0       	ldi	r20, 0x0A	; 10
 460:	be 01       	movw	r22, r28
 462:	6f 5f       	subi	r22, 0xFF	; 255
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	c8 01       	movw	r24, r16
 468:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    
    //Put light intensity value TO LCD
    itoa(value, lcd_string, 10);  // Convert decimal value (light intensity) to string
    lcd_gotoxy(12,0);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	8c e0       	ldi	r24, 0x0C	; 12
 470:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_gotoxy>
    lcd_puts(lcd_string);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_puts>
    // send the same value to UART
     uart_puts(lcd_string);
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_puts>
     uart_puts(" ");
 484:	82 e2       	ldi	r24, 0x22	; 34
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_puts>
    
	//If light intensity is below 300, horizontal motor moves to the left
    if(value>=0 && value<=300)
 48c:	0d 32       	cpi	r16, 0x2D	; 45
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	12 07       	cpc	r17, r18
 492:	d0 f4       	brcc	.+52     	; 0x4c8 <__vector_21+0xb0>
    {
        GPIO_write_high(&PORTB, MOTOR1);   
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	85 e2       	ldi	r24, 0x25	; 37
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49e:	8f e9       	ldi	r24, 0x9F	; 159
 4a0:	9f e0       	ldi	r25, 0x0F	; 15
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__vector_21+0x8a>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__vector_21+0x90>
 4a8:	00 00       	nop
        _delay_ms(1);
        GPIO_write_low(&PORTB, MOTOR1) ;
 4aa:	65 e0       	ldi	r22, 0x05	; 5
 4ac:	85 e2       	ldi	r24, 0x25	; 37
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 4b4:	9f e7       	ldi	r25, 0x7F	; 127
 4b6:	2d ee       	ldi	r18, 0xED	; 237
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	20 40       	sbci	r18, 0x00	; 0
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__vector_21+0xa2>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__vector_21+0xac>
 4c4:	00 00       	nop
 4c6:	39 c0       	rjmp	.+114    	; 0x53a <__vector_21+0x122>
        _delay_ms(19);
    }    
	//If light intensity is between 300 and 600, horizontal motor moves to the middle (front)
     else if(value>300 && value <=600)
 4c8:	c8 01       	movw	r24, r16
 4ca:	8d 52       	subi	r24, 0x2D	; 45
 4cc:	91 40       	sbci	r25, 0x01	; 1
 4ce:	8c 32       	cpi	r24, 0x2C	; 44
 4d0:	91 40       	sbci	r25, 0x01	; 1
 4d2:	d0 f4       	brcc	.+52     	; 0x508 <__vector_21+0xf0>
     {
        GPIO_write_high(&PORTB, MOTOR1);
 4d4:	65 e0       	ldi	r22, 0x05	; 5
 4d6:	85 e2       	ldi	r24, 0x25	; 37
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 4de:	8f e6       	ldi	r24, 0x6F	; 111
 4e0:	97 e1       	ldi	r25, 0x17	; 23
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__vector_21+0xca>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__vector_21+0xd0>
 4e8:	00 00       	nop
        _delay_ms(1.5);
        GPIO_write_low(&PORTB, MOTOR1) ;
 4ea:	65 e0       	ldi	r22, 0x05	; 5
 4ec:	85 e2       	ldi	r24, 0x25	; 37
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 4f4:	9f e3       	ldi	r25, 0x3F	; 63
 4f6:	27 ee       	ldi	r18, 0xE7	; 231
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	20 40       	sbci	r18, 0x00	; 0
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__vector_21+0xe2>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__vector_21+0xec>
 504:	00 00       	nop
 506:	19 c0       	rjmp	.+50     	; 0x53a <__vector_21+0x122>
        _delay_ms(18.5);         
     }
	 //If light intensity is over 600, horizontal motor moves to the right
     else
     {
        GPIO_write_high(&PORTB, MOTOR1);
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	85 e2       	ldi	r24, 0x25	; 37
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 512:	8f e3       	ldi	r24, 0x3F	; 63
 514:	9f e1       	ldi	r25, 0x1F	; 31
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <__vector_21+0xfe>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__vector_21+0x104>
 51c:	00 00       	nop
        _delay_ms(2);
        GPIO_write_low(&PORTB, MOTOR1) ;
 51e:	65 e0       	ldi	r22, 0x05	; 5
 520:	85 e2       	ldi	r24, 0x25	; 37
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	20 ee       	ldi	r18, 0xE0	; 224
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	20 40       	sbci	r18, 0x00	; 0
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <__vector_21+0x116>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__vector_21+0x120>
 538:	00 00       	nop
        _delay_ms(18);         
     }
     //If light intensity is below 500, vertical motor moves up
     if(value>0 && value <=500)
 53a:	01 50       	subi	r16, 0x01	; 1
 53c:	11 09       	sbc	r17, r1
 53e:	04 3f       	cpi	r16, 0xF4	; 244
 540:	11 40       	sbci	r17, 0x01	; 1
 542:	d0 f4       	brcc	.+52     	; 0x578 <__vector_21+0x160>
     {
         GPIO_write_high(&PORTB, MOTOR2);
 544:	64 e0       	ldi	r22, 0x04	; 4
 546:	85 e2       	ldi	r24, 0x25	; 37
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 54e:	8f e6       	ldi	r24, 0x6F	; 111
 550:	97 e1       	ldi	r25, 0x17	; 23
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <__vector_21+0x13a>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__vector_21+0x140>
 558:	00 00       	nop
         _delay_ms(1.5);
         GPIO_write_low(&PORTB, MOTOR2) ;
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	85 e2       	ldi	r24, 0x25	; 37
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 564:	9f e3       	ldi	r25, 0x3F	; 63
 566:	27 ee       	ldi	r18, 0xE7	; 231
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	91 50       	subi	r25, 0x01	; 1
 56c:	20 40       	sbci	r18, 0x00	; 0
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__vector_21+0x152>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__vector_21+0x15c>
 574:	00 00       	nop
 576:	19 c0       	rjmp	.+50     	; 0x5aa <__vector_21+0x192>
         _delay_ms(18.5);
     }
     //If light intensity is over 500, vertical motor moves down
     else
     {
         GPIO_write_high(&PORTB, MOTOR2);
 578:	64 e0       	ldi	r22, 0x04	; 4
 57a:	85 e2       	ldi	r24, 0x25	; 37
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 582:	8f e3       	ldi	r24, 0x3F	; 63
 584:	9f e1       	ldi	r25, 0x1F	; 31
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <__vector_21+0x16e>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <__vector_21+0x174>
 58c:	00 00       	nop
         _delay_ms(2);
         GPIO_write_low(&PORTB, MOTOR2) ;
 58e:	64 e0       	ldi	r22, 0x04	; 4
 590:	85 e2       	ldi	r24, 0x25	; 37
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 598:	9f ef       	ldi	r25, 0xFF	; 255
 59a:	20 ee       	ldi	r18, 0xE0	; 224
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	20 40       	sbci	r18, 0x00	; 0
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	e1 f7       	brne	.-8      	; 0x59e <__vector_21+0x186>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <__vector_21+0x190>
 5a8:	00 00       	nop
         _delay_ms(18);
     }
     
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 5dc:	87 b1       	in	r24, 0x07	; 7
 5de:	8f 7c       	andi	r24, 0xCF	; 207
 5e0:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 5e2:	88 b1       	in	r24, 0x08	; 8
 5e4:	80 63       	ori	r24, 0x30	; 48
 5e6:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 5e8:	e9 eb       	ldi	r30, 0xB9	; 185
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	8c 7f       	andi	r24, 0xFC	; 252
 5f0:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 5f2:	88 e9       	ldi	r24, 0x98	; 152
 5f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 5f8:	08 95       	ret

000005fa <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 5fa:	94 ea       	ldi	r25, 0xA4	; 164
 5fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 600:	ec eb       	ldi	r30, 0xBC	; 188
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	90 81       	ld	r25, Z
 606:	99 23       	and	r25, r25
 608:	ec f7       	brge	.-6      	; 0x604 <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 60a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 60e:	84 e8       	ldi	r24, 0x84	; 132
 610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 614:	ec eb       	ldi	r30, 0xBC	; 188
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	88 23       	and	r24, r24
 61c:	ec f7       	brge	.-6      	; 0x618 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 61e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 622:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 624:	98 31       	cpi	r25, 0x18	; 24
 626:	29 f0       	breq	.+10     	; 0x632 <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 34       	cpi	r25, 0x40	; 64
 62c:	19 f4       	brne	.+6      	; 0x634 <twi_start+0x3a>
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	08 95       	ret
 632:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 634:	08 95       	ret

00000636 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 636:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 63a:	84 e8       	ldi	r24, 0x84	; 132
 63c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 640:	ec eb       	ldi	r30, 0xBC	; 188
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	ec f7       	brge	.-6      	; 0x644 <twi_write+0xe>
}
 64a:	08 95       	ret

0000064c <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 64c:	84 ec       	ldi	r24, 0xC4	; 196
 64e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 652:	ec eb       	ldi	r30, 0xBC	; 188
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	88 23       	and	r24, r24
 65a:	ec f7       	brge	.-6      	; 0x656 <twi_read_ack+0xa>
    return (TWDR);
 65c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 660:	08 95       	ret

00000662 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 662:	84 e8       	ldi	r24, 0x84	; 132
 664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 668:	ec eb       	ldi	r30, 0xBC	; 188
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	ec f7       	brge	.-6      	; 0x66c <twi_read_nack+0xa>
    return (TWDR);
 672:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 676:	08 95       	ret

00000678 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 678:	84 e9       	ldi	r24, 0x94	; 148
 67a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 67e:	08 95       	ret

00000680 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
 694:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 698:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 69c:	8c 71       	andi	r24, 0x1C	; 28
 69e:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART_RxHead>
 6a2:	ef 5f       	subi	r30, 0xFF	; 255
 6a4:	ef 71       	andi	r30, 0x1F	; 31
 6a6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <UART_RxTail>
 6aa:	e9 17       	cp	r30, r25
 6ac:	39 f0       	breq	.+14     	; 0x6bc <__vector_18+0x3c>
 6ae:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <UART_RxHead>
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	eb 5c       	subi	r30, 0xCB	; 203
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	20 83       	st	Z, r18
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <__vector_18+0x3e>
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__data_end>
 6c2:	89 2b       	or	r24, r25
 6c4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_19>:
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31
 6ee:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_TxHead>
 6f2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_TxTail>
 6f6:	98 17       	cp	r25, r24
 6f8:	69 f0       	breq	.+26     	; 0x714 <__vector_19+0x38>
 6fa:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <UART_TxTail>
 6fe:	ef 5f       	subi	r30, 0xFF	; 255
 700:	ef 71       	andi	r30, 0x1F	; 31
 702:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <UART_TxTail>
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	eb 5a       	subi	r30, 0xAB	; 171
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	80 81       	ld	r24, Z
 70e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 712:	05 c0       	rjmp	.+10     	; 0x71e <__vector_19+0x42>
 714:	e1 ec       	ldi	r30, 0xC1	; 193
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	8f 7d       	andi	r24, 0xDF	; 223
 71c:	80 83       	st	Z, r24
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	0f 90       	pop	r0
 728:	0f be       	out	0x3f, r0	; 63
 72a:	0f 90       	pop	r0
 72c:	1f 90       	pop	r1
 72e:	18 95       	reti

00000730 <uart_init>:
 730:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <UART_TxHead>
 734:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UART_TxTail>
 738:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <UART_RxHead>
 73c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <UART_RxTail>
 740:	99 23       	and	r25, r25
 742:	1c f4       	brge	.+6      	; 0x74a <uart_init+0x1a>
 744:	22 e0       	ldi	r18, 0x02	; 2
 746:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 74a:	90 78       	andi	r25, 0x80	; 128
 74c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 750:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 754:	88 e9       	ldi	r24, 0x98	; 152
 756:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 75a:	86 e0       	ldi	r24, 0x06	; 6
 75c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 760:	08 95       	ret

00000762 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 762:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <UART_TxHead>
 766:	2f 5f       	subi	r18, 0xFF	; 255
 768:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 76a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART_TxTail>
 76e:	29 17       	cp	r18, r25
 770:	e1 f3       	breq	.-8      	; 0x76a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 772:	e2 2f       	mov	r30, r18
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	eb 5a       	subi	r30, 0xAB	; 171
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 77c:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 780:	e1 ec       	ldi	r30, 0xC1	; 193
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	80 62       	ori	r24, 0x20	; 32
 788:	80 83       	st	Z, r24
 78a:	08 95       	ret

0000078c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	ec 01       	movw	r28, r24
    while (*s)
 792:	88 81       	ld	r24, Y
 794:	88 23       	and	r24, r24
 796:	31 f0       	breq	.+12     	; 0x7a4 <uart_puts+0x18>
 798:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 79a:	0e 94 b1 03 	call	0x762	; 0x762 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 79e:	89 91       	ld	r24, Y+
 7a0:	81 11       	cpse	r24, r1
 7a2:	fb cf       	rjmp	.-10     	; 0x79a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <__itoa_ncheck>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	4a 30       	cpi	r20, 0x0A	; 10
 7ae:	31 f4       	brne	.+12     	; 0x7bc <__itoa_ncheck+0x12>
 7b0:	99 23       	and	r25, r25
 7b2:	22 f4       	brpl	.+8      	; 0x7bc <__itoa_ncheck+0x12>
 7b4:	bd e2       	ldi	r27, 0x2D	; 45
 7b6:	90 95       	com	r25
 7b8:	81 95       	neg	r24
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__utoa_common>

000007c0 <__utoa_ncheck>:
 7c0:	bb 27       	eor	r27, r27

000007c2 <__utoa_common>:
 7c2:	fb 01       	movw	r30, r22
 7c4:	55 27       	eor	r21, r21
 7c6:	aa 27       	eor	r26, r26
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	aa 1f       	adc	r26, r26
 7ce:	a4 17       	cp	r26, r20
 7d0:	10 f0       	brcs	.+4      	; 0x7d6 <__utoa_common+0x14>
 7d2:	a4 1b       	sub	r26, r20
 7d4:	83 95       	inc	r24
 7d6:	50 51       	subi	r21, 0x10	; 16
 7d8:	b9 f7       	brne	.-18     	; 0x7c8 <__utoa_common+0x6>
 7da:	a0 5d       	subi	r26, 0xD0	; 208
 7dc:	aa 33       	cpi	r26, 0x3A	; 58
 7de:	08 f0       	brcs	.+2      	; 0x7e2 <__utoa_common+0x20>
 7e0:	a9 5d       	subi	r26, 0xD9	; 217
 7e2:	a1 93       	st	Z+, r26
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	79 f7       	brne	.-34     	; 0x7c6 <__utoa_common+0x4>
 7e8:	b1 11       	cpse	r27, r1
 7ea:	b1 93       	st	Z+, r27
 7ec:	11 92       	st	Z+, r1
 7ee:	cb 01       	movw	r24, r22
 7f0:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <strrev>

000007f4 <strrev>:
 7f4:	dc 01       	movw	r26, r24
 7f6:	fc 01       	movw	r30, r24
 7f8:	67 2f       	mov	r22, r23
 7fa:	71 91       	ld	r23, Z+
 7fc:	77 23       	and	r23, r23
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <strrev+0x4>
 800:	32 97       	sbiw	r30, 0x02	; 2
 802:	04 c0       	rjmp	.+8      	; 0x80c <strrev+0x18>
 804:	7c 91       	ld	r23, X
 806:	6d 93       	st	X+, r22
 808:	70 83       	st	Z, r23
 80a:	62 91       	ld	r22, -Z
 80c:	ae 17       	cp	r26, r30
 80e:	bf 07       	cpc	r27, r31
 810:	c8 f3       	brcs	.-14     	; 0x804 <strrev+0x10>
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
