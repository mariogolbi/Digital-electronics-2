
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800118  00800118  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001428  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a30  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8f  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_18>
  4c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 35       	cpi	r26, 0x5D	; 93
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ce:	8e e0       	ldi	r24, 0x0E	; 14
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc

	ADMUX |= (1<<REFS0);
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 83       	st	Z, r24

    // Set input channel to ADC0

	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 2f0:	80 81       	ld	r24, Z
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	80 83       	st	Z, r24

    // Enable ADC module

	ADCSRA |= (1<<ADEN);
 2f6:	ea e7       	ldi	r30, 0x7A	; 122
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	80 83       	st	Z, r24

    // Enable conversion complete interrupt

	ADCSRA |= (1<<ADIE);
 300:	80 81       	ld	r24, Z
 302:	88 60       	ori	r24, 0x08	; 8
 304:	80 83       	st	Z, r24

    // Set clock prescaler to 128

	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 306:	80 81       	ld	r24, Z
 308:	87 60       	ori	r24, 0x07	; 7
 30a:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt

	TIM1_overflow_262ms();
 30c:	e1 e8       	ldi	r30, 0x81	; 129
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	8b 7f       	andi	r24, 0xFB	; 251
 314:	80 83       	st	Z, r24
 316:	80 81       	ld	r24, Z
 318:	83 60       	ori	r24, 0x03	; 3
 31a:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();	
 31c:	ef e6       	ldi	r30, 0x6F	; 111
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	81 60       	ori	r24, 0x01	; 1
 324:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 326:	89 e0       	ldi	r24, 0x09	; 9
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart_init>


    // Enables interrupts by setting the global interrupt mask
    sei();
 32e:	78 94       	sei
 330:	ff cf       	rjmp	.-2      	; 0x330 <main+0xa0>

00000332 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	8f 93       	push	r24
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 342:	ea e7       	ldi	r30, 0x7A	; 122
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	80 83       	st	Z, r24

}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <__vector_21+0x2c>
 388:	00 d0       	rcall	.+0      	; 0x38a <__vector_21+0x2e>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
	uint16_t value=0;
	char lcd_string[4]="0000";
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	90 e3       	ldi	r25, 0x30	; 48
 392:	9a 83       	std	Y+2, r25	; 0x02
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	9c 83       	std	Y+4, r25	; 0x04
 398:	8b 83       	std	Y+3, r24	; 0x03
	
	value = ADC;                //Copy ADC result to 16-bit 
 39a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 39e:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	// Clear pr,evious value
	lcd_gotoxy(8,0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts("    ");
 3aa:	82 e1       	ldi	r24, 0x12	; 18
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3b2:	4a e0       	ldi	r20, 0x0A	; 10
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 9e 02 	call	0x53c	; 0x53c <__itoa_ncheck>
	
	//Put new value to LCD
	itoa(value,lcd_string,10); //convert decimal value to string
	lcd_gotoxy(8,0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	88 e0       	ldi	r24, 0x08	; 8
 3c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts(lcd_string);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	// Send the same value to UART
	uart_puts(lcd_string);
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 91 02 	call	0x522	; 0x522 <uart_puts>
	uart_puts("  ");
 3d8:	84 e1       	ldi	r24, 0x14	; 20
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 91 02 	call	0x522	; 0x522 <uart_puts>
	// Display value in hexa
	
	// Display what push button was pressed
	

}
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
 426:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 42a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 42e:	8c 71       	andi	r24, 0x1C	; 28
 430:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <UART_RxHead>
 434:	ef 5f       	subi	r30, 0xFF	; 255
 436:	ef 71       	andi	r30, 0x1F	; 31
 438:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <UART_RxTail>
 43c:	e9 17       	cp	r30, r25
 43e:	39 f0       	breq	.+14     	; 0x44e <__vector_18+0x3c>
 440:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <UART_RxHead>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e3 5e       	subi	r30, 0xE3	; 227
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	20 83       	st	Z, r18
 44c:	01 c0       	rjmp	.+2      	; 0x450 <__vector_18+0x3e>
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
 454:	89 2b       	or	r24, r25
 456:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_19>:
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
 480:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_TxHead>
 484:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <UART_TxTail>
 488:	98 17       	cp	r25, r24
 48a:	69 f0       	breq	.+26     	; 0x4a6 <__vector_19+0x38>
 48c:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <UART_TxTail>
 490:	ef 5f       	subi	r30, 0xFF	; 255
 492:	ef 71       	andi	r30, 0x1F	; 31
 494:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <UART_TxTail>
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	e3 5c       	subi	r30, 0xC3	; 195
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	80 81       	ld	r24, Z
 4a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__vector_19+0x42>
 4a6:	e1 ec       	ldi	r30, 0xC1	; 193
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	80 83       	st	Z, r24
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <uart_init>:
 4c2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <UART_TxHead>
 4c6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <UART_TxTail>
 4ca:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <UART_RxHead>
 4ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <UART_RxTail>
 4d2:	28 2f       	mov	r18, r24
 4d4:	39 2f       	mov	r19, r25
 4d6:	33 23       	and	r19, r19
 4d8:	1c f4       	brge	.+6      	; 0x4e0 <uart_init+0x1e>
 4da:	22 e0       	ldi	r18, 0x02	; 2
 4dc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4e0:	90 78       	andi	r25, 0x80	; 128
 4e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 4e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4ea:	88 e9       	ldi	r24, 0x98	; 152
 4ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4f6:	08 95       	ret

000004f8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4f8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <UART_TxHead>
 4fc:	2f 5f       	subi	r18, 0xFF	; 255
 4fe:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 500:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <UART_TxTail>
 504:	29 17       	cp	r18, r25
 506:	e1 f3       	breq	.-8      	; 0x500 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 508:	e2 2f       	mov	r30, r18
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	e3 5c       	subi	r30, 0xC3	; 195
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 512:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 516:	e1 ec       	ldi	r30, 0xC1	; 193
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	80 62       	ori	r24, 0x20	; 32
 51e:	80 83       	st	Z, r24
 520:	08 95       	ret

00000522 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
    while (*s)
 528:	03 c0       	rjmp	.+6      	; 0x530 <uart_puts+0xe>
        uart_putc(*s++);
 52a:	21 96       	adiw	r28, 0x01	; 1
 52c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 530:	88 81       	ld	r24, Y
 532:	81 11       	cpse	r24, r1
 534:	fa cf       	rjmp	.-12     	; 0x52a <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <__itoa_ncheck>:
 53c:	bb 27       	eor	r27, r27
 53e:	4a 30       	cpi	r20, 0x0A	; 10
 540:	31 f4       	brne	.+12     	; 0x54e <__itoa_ncheck+0x12>
 542:	99 23       	and	r25, r25
 544:	22 f4       	brpl	.+8      	; 0x54e <__itoa_ncheck+0x12>
 546:	bd e2       	ldi	r27, 0x2D	; 45
 548:	90 95       	com	r25
 54a:	81 95       	neg	r24
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	0c 94 aa 02 	jmp	0x554	; 0x554 <__utoa_common>

00000552 <__utoa_ncheck>:
 552:	bb 27       	eor	r27, r27

00000554 <__utoa_common>:
 554:	fb 01       	movw	r30, r22
 556:	55 27       	eor	r21, r21
 558:	aa 27       	eor	r26, r26
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	aa 1f       	adc	r26, r26
 560:	a4 17       	cp	r26, r20
 562:	10 f0       	brcs	.+4      	; 0x568 <__utoa_common+0x14>
 564:	a4 1b       	sub	r26, r20
 566:	83 95       	inc	r24
 568:	50 51       	subi	r21, 0x10	; 16
 56a:	b9 f7       	brne	.-18     	; 0x55a <__utoa_common+0x6>
 56c:	a0 5d       	subi	r26, 0xD0	; 208
 56e:	aa 33       	cpi	r26, 0x3A	; 58
 570:	08 f0       	brcs	.+2      	; 0x574 <__utoa_common+0x20>
 572:	a9 5d       	subi	r26, 0xD9	; 217
 574:	a1 93       	st	Z+, r26
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	79 f7       	brne	.-34     	; 0x558 <__utoa_common+0x4>
 57a:	b1 11       	cpse	r27, r1
 57c:	b1 93       	st	Z+, r27
 57e:	11 92       	st	Z+, r1
 580:	cb 01       	movw	r24, r22
 582:	0c 94 c3 02 	jmp	0x586	; 0x586 <strrev>

00000586 <strrev>:
 586:	dc 01       	movw	r26, r24
 588:	fc 01       	movw	r30, r24
 58a:	67 2f       	mov	r22, r23
 58c:	71 91       	ld	r23, Z+
 58e:	77 23       	and	r23, r23
 590:	e1 f7       	brne	.-8      	; 0x58a <strrev+0x4>
 592:	32 97       	sbiw	r30, 0x02	; 2
 594:	04 c0       	rjmp	.+8      	; 0x59e <strrev+0x18>
 596:	7c 91       	ld	r23, X
 598:	6d 93       	st	X+, r22
 59a:	70 83       	st	Z, r23
 59c:	62 91       	ld	r22, -Z
 59e:	ae 17       	cp	r26, r30
 5a0:	bf 07       	cpc	r27, r31
 5a2:	c8 f3       	brcs	.-14     	; 0x596 <strrev+0x10>
 5a4:	08 95       	ret

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
