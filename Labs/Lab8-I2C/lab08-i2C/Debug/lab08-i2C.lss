
lab08-i2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000420  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800124  00800124  000004d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7f  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056c  00000000  00000000  00002b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000030bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_18>
  4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 36       	cpi	r26, 0x69	; 105
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 9c 01 	call	0x338	; 0x338 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Enable interrupt and set the overflow prescaler to 33 ms
    TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c ;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	49 f0       	breq	.+18     	; 0x126 <__vector_13+0x4e>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	d1 f1       	breq	.+116    	; 0x18c <__vector_13+0xb4>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	09 f0       	breq	.+2      	; 0x11e <__vector_13+0x46>
 11c:	4b c0       	rjmp	.+150    	; 0x1b4 <__vector_13+0xdc>
    // Increment I2C slave address
    case STATE_IDLE:
//      addr++;
        // If slave address is between 8 and 119 then move to SEND state
//        if((7<addr)&&(addr<120))
            state=STATE_SEND;   
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
//        else
//            state=STATE_IDLE;
        break;
 124:	4a c0       	rjmp	.+148    	; 0x1ba <__vector_13+0xe2>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 126:	88 eb       	ldi	r24, 0xB8	; 184
 128:	0e 94 01 01 	call	0x202	; 0x202 <twi_start>
 //TEMP+ HUMID ---------------------
        
        twi_write(0x0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 1f 01 	call	0x23e	; 0x23e <twi_write>
        twi_stop();
 132:	0e 94 40 01 	call	0x280	; 0x280 <twi_stop>
        result = twi_start((addr<<1) + TWI_READ);
 136:	89 eb       	ldi	r24, 0xB9	; 185
 138:	0e 94 01 01 	call	0x202	; 0x202 <twi_start>
        //Read temperature integer part
        result=twi_read_ack();
 13c:	0e 94 2a 01 	call	0x254	; 0x254 <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 140:	4a e0       	ldi	r20, 0x0A	; 10
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__itoa_ncheck>
        itoa(result,uart_string,10);
        uart_puts(uart_string);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        //Read temperature fractional part
        result=twi_read_nack();
 156:	0e 94 35 01 	call	0x26a	; 0x26a <twi_read_nack>
 15a:	4a e0       	ldi	r20, 0x0A	; 10
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__itoa_ncheck>
        itoa(result,uart_string,10); 
        uart_puts(".");
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        uart_puts(uart_string);
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        uart_puts(" ");
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        twi_stop();
 180:	0e 94 40 01 	call	0x280	; 0x280 <twi_stop>
         * otherwise move to IDLE */
/*        if(result==0)
            state=STATE_ACK;
        else
*/
            state=STATE_IDLE;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

        break;
 18a:	17 c0       	rjmp	.+46     	; 0x1ba <__vector_13+0xe2>
 18c:	40 e1       	ldi	r20, 0x10	; 16
 18e:	be 01       	movw	r22, r28
 190:	6f 5f       	subi	r22, 0xFF	; 255
 192:	7f 4f       	sbci	r23, 0xFF	; 255
 194:	8c e5       	ldi	r24, 0x5C	; 92
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr,uart_string,16);
        uart_puts(uart_string);
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        uart_puts(" ");
 1a4:	81 e2       	ldi	r24, 0x21	; 33
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
        state = STATE_IDLE;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <__vector_13+0xe2>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
    }
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8f 7c       	andi	r24, 0xCF	; 207
 1e8:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	80 63       	ori	r24, 0x30	; 48
 1ee:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 1f0:	e9 eb       	ldi	r30, 0xB9	; 185
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8c 7f       	andi	r24, 0xFC	; 252
 1f8:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 1fa:	88 e9       	ldi	r24, 0x98	; 152
 1fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 200:	08 95       	ret

00000202 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 202:	94 ea       	ldi	r25, 0xA4	; 164
 204:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	90 81       	ld	r25, Z
 20e:	99 23       	and	r25, r25
 210:	ec f7       	brge	.-6      	; 0x20c <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 216:	84 e8       	ldi	r24, 0x84	; 132
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 21c:	ec eb       	ldi	r30, 0xBC	; 188
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	ec f7       	brge	.-6      	; 0x220 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 226:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 22a:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 22c:	98 31       	cpi	r25, 0x18	; 24
 22e:	29 f0       	breq	.+10     	; 0x23a <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 34       	cpi	r25, 0x40	; 64
 234:	19 f4       	brne	.+6      	; 0x23c <twi_start+0x3a>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
 23a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 23c:	08 95       	ret

0000023e <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 248:	ec eb       	ldi	r30, 0xBC	; 188
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <twi_write+0xe>
}
 252:	08 95       	ret

00000254 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 254:	84 ec       	ldi	r24, 0xC4	; 196
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 25a:	ec eb       	ldi	r30, 0xBC	; 188
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <twi_read_ack+0xa>
    return (TWDR);
 264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 268:	08 95       	ret

0000026a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 26a:	84 e8       	ldi	r24, 0x84	; 132
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	ec f7       	brge	.-6      	; 0x274 <twi_read_nack+0xa>
    return (TWDR);
 27a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 27e:	08 95       	ret

00000280 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 280:	84 e9       	ldi	r24, 0x94	; 148
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 286:	08 95       	ret

00000288 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2a0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a4:	8c 71       	andi	r24, 0x1C	; 28
 2a6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <UART_RxHead>
 2aa:	ef 5f       	subi	r30, 0xFF	; 255
 2ac:	ef 71       	andi	r30, 0x1F	; 31
 2ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_RxTail>
 2b2:	e9 17       	cp	r30, r25
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <__vector_18+0x3c>
 2b6:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <UART_RxHead>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e7 5d       	subi	r30, 0xD7	; 215
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	20 83       	st	Z, r18
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <__vector_18+0x3e>
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 2ca:	89 2b       	or	r24, r25
 2cc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_19>:
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
 2f6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_TxHead>
 2fa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <UART_TxTail>
 2fe:	98 17       	cp	r25, r24
 300:	69 f0       	breq	.+26     	; 0x31c <__vector_19+0x38>
 302:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_TxTail>
 306:	ef 5f       	subi	r30, 0xFF	; 255
 308:	ef 71       	andi	r30, 0x1F	; 31
 30a:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_TxTail>
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	e7 5b       	subi	r30, 0xB7	; 183
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <__vector_19+0x42>
 31c:	e1 ec       	ldi	r30, 0xC1	; 193
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 83       	st	Z, r24
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <uart_init>:
 338:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <UART_TxHead>
 33c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <UART_TxTail>
 340:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_RxHead>
 344:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_RxTail>
 348:	99 23       	and	r25, r25
 34a:	1c f4       	brge	.+6      	; 0x352 <uart_init+0x1a>
 34c:	22 e0       	ldi	r18, 0x02	; 2
 34e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 352:	90 78       	andi	r25, 0x80	; 128
 354:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 358:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 35c:	88 e9       	ldi	r24, 0x98	; 152
 35e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 368:	08 95       	ret

0000036a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 36a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <UART_TxHead>
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 372:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART_TxTail>
 376:	29 17       	cp	r18, r25
 378:	e1 f3       	breq	.-8      	; 0x372 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 37a:	e2 2f       	mov	r30, r18
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	e7 5b       	subi	r30, 0xB7	; 183
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 384:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 388:	e1 ec       	ldi	r30, 0xC1	; 193
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 62       	ori	r24, 0x20	; 32
 390:	80 83       	st	Z, r24
 392:	08 95       	ret

00000394 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
    while (*s)
 39a:	88 81       	ld	r24, Y
 39c:	88 23       	and	r24, r24
 39e:	31 f0       	breq	.+12     	; 0x3ac <uart_puts+0x18>
 3a0:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3a2:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3a6:	89 91       	ld	r24, Y+
 3a8:	81 11       	cpse	r24, r1
 3aa:	fb cf       	rjmp	.-10     	; 0x3a2 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <__itoa_ncheck>:
 3b2:	bb 27       	eor	r27, r27
 3b4:	4a 30       	cpi	r20, 0x0A	; 10
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <__itoa_ncheck+0x12>
 3b8:	99 23       	and	r25, r25
 3ba:	22 f4       	brpl	.+8      	; 0x3c4 <__itoa_ncheck+0x12>
 3bc:	bd e2       	ldi	r27, 0x2D	; 45
 3be:	90 95       	com	r25
 3c0:	81 95       	neg	r24
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__utoa_common>

000003c8 <__utoa_ncheck>:
 3c8:	bb 27       	eor	r27, r27

000003ca <__utoa_common>:
 3ca:	fb 01       	movw	r30, r22
 3cc:	55 27       	eor	r21, r21
 3ce:	aa 27       	eor	r26, r26
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	aa 1f       	adc	r26, r26
 3d6:	a4 17       	cp	r26, r20
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__utoa_common+0x14>
 3da:	a4 1b       	sub	r26, r20
 3dc:	83 95       	inc	r24
 3de:	50 51       	subi	r21, 0x10	; 16
 3e0:	b9 f7       	brne	.-18     	; 0x3d0 <__utoa_common+0x6>
 3e2:	a0 5d       	subi	r26, 0xD0	; 208
 3e4:	aa 33       	cpi	r26, 0x3A	; 58
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <__utoa_common+0x20>
 3e8:	a9 5d       	subi	r26, 0xD9	; 217
 3ea:	a1 93       	st	Z+, r26
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	79 f7       	brne	.-34     	; 0x3ce <__utoa_common+0x4>
 3f0:	b1 11       	cpse	r27, r1
 3f2:	b1 93       	st	Z+, r27
 3f4:	11 92       	st	Z+, r1
 3f6:	cb 01       	movw	r24, r22
 3f8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <strrev>

000003fc <strrev>:
 3fc:	dc 01       	movw	r26, r24
 3fe:	fc 01       	movw	r30, r24
 400:	67 2f       	mov	r22, r23
 402:	71 91       	ld	r23, Z+
 404:	77 23       	and	r23, r23
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	32 97       	sbiw	r30, 0x02	; 2
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	7c 91       	ld	r23, X
 40e:	6d 93       	st	X+, r22
 410:	70 83       	st	Z, r23
 412:	62 91       	ld	r22, -Z
 414:	ae 17       	cp	r26, r30
 416:	bf 07       	cpc	r27, r31
 418:	c8 f3       	brcs	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
